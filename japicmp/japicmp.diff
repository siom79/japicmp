Comparing source compatibility of /home/runner/work/japicmp/japicmp/japicmp/target/japicmp-0.23.1.jar against /home/runner/.m2/repository/com/github/siom79/japicmp/japicmp/0.23.0/japicmp-0.23.0.jar
***! MODIFIED CLASS: PUBLIC japicmp.cmp.JarArchiveComparator  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.CtClass><javassist.CtClass> (<-japicmp.util.Optional<javassist.CtClass><javassist.CtClass>) loadClass(japicmp.cmp.JarArchiveComparator$ArchiveType, java.lang.String)
***! MODIFIED CLASS: PUBLIC japicmp.config.Options  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED METHOD: PUBLIC(-) void addExcludeFromArgument(japicmp.util.Optional<java.lang.String>, boolean)
	+++  NEW METHOD: PUBLIC(+) void addExcludeFromArgument(java.util.Optional<java.lang.String>, boolean)
	---! REMOVED METHOD: PUBLIC(-) void addIncludeFromArgument(japicmp.util.Optional<java.lang.String>, boolean)
	+++  NEW METHOD: PUBLIC(+) void addIncludeFromArgument(java.util.Optional<java.lang.String>, boolean)
	---! REMOVED METHOD: PUBLIC(-) java.util.List<japicmp.filter.Filter> createFilterList(japicmp.util.Optional<java.lang.String>, java.util.List<japicmp.filter.Filter>, java.lang.String, boolean)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.filter.Filter> createFilterList(java.util.Optional<java.lang.String>, java.util.List<japicmp.filter.Filter>, java.lang.String, boolean)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getHtmlOutputFile()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getHtmlStylesheet()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getNewClassPath()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getOldClassPath()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getXmlOutputFile()
	---! REMOVED METHOD: PUBLIC(-) void setAccessModifier(japicmp.util.Optional<japicmp.model.AccessModifier>)
	+++  NEW METHOD: PUBLIC(+) void setAccessModifier(java.util.Optional<japicmp.model.AccessModifier>)
	---! REMOVED METHOD: PUBLIC(-) void setHtmlOutputFile(japicmp.util.Optional<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) void setHtmlOutputFile(java.util.Optional<java.lang.String>)
	---! REMOVED METHOD: PUBLIC(-) void setHtmlStylesheet(japicmp.util.Optional<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) void setHtmlStylesheet(java.util.Optional<java.lang.String>)
	---! REMOVED METHOD: PUBLIC(-) void setNewClassPath(japicmp.util.Optional<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) void setNewClassPath(java.util.Optional<java.lang.String>)
	---! REMOVED METHOD: PUBLIC(-) void setOldClassPath(japicmp.util.Optional<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) void setOldClassPath(java.util.Optional<java.lang.String>)
	---! REMOVED METHOD: PUBLIC(-) void setXmlOutputFile(japicmp.util.Optional<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) void setXmlOutputFile(java.util.Optional<java.lang.String>)
***! MODIFIED ENUM: PUBLIC FINAL japicmp.model.AccessModifier  (compatible)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED METHOD: PUBLIC STATIC java.util.Optional<japicmp.model.AccessModifier><japicmp.model.AccessModifier> (<-japicmp.util.Optional<japicmp.model.AccessModifier><japicmp.model.AccessModifier>) toModifier(java.lang.String)
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiAnnotation  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiAnnotation(java.lang.String, japicmp.util.Optional<javassist.bytecode.annotation.Annotation>, japicmp.util.Optional<javassist.bytecode.annotation.Annotation>, japicmp.model.JApiChangeStatus)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiAnnotation(java.lang.String, java.util.Optional<javassist.bytecode.annotation.Annotation>, java.util.Optional<javassist.bytecode.annotation.Annotation>, japicmp.model.JApiChangeStatus)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<japicmp.model.JApiClass><japicmp.model.JApiClass> (<-japicmp.util.Optional<japicmp.model.JApiClass><japicmp.model.JApiClass>) getCorrespondingJApiClass()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.bytecode.annotation.Annotation><javassist.bytecode.annotation.Annotation> (<-japicmp.util.Optional<javassist.bytecode.annotation.Annotation><javassist.bytecode.annotation.Annotation>) getNewAnnotation()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.bytecode.annotation.Annotation><javassist.bytecode.annotation.Annotation> (<-japicmp.util.Optional<javassist.bytecode.annotation.Annotation><javassist.bytecode.annotation.Annotation>) getOldAnnotation()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiAnnotationElement  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiAnnotationElement(java.lang.String, japicmp.util.Optional<javassist.bytecode.annotation.MemberValue>, japicmp.util.Optional<javassist.bytecode.annotation.MemberValue>, japicmp.model.JApiChangeStatus)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiAnnotationElement(java.lang.String, java.util.Optional<javassist.bytecode.annotation.MemberValue>, java.util.Optional<javassist.bytecode.annotation.MemberValue>, japicmp.model.JApiChangeStatus)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.bytecode.annotation.MemberValue><javassist.bytecode.annotation.MemberValue> (<-japicmp.util.Optional<javassist.bytecode.annotation.MemberValue><javassist.bytecode.annotation.MemberValue>) getNewValue()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.bytecode.annotation.MemberValue><javassist.bytecode.annotation.MemberValue> (<-japicmp.util.Optional<javassist.bytecode.annotation.MemberValue><javassist.bytecode.annotation.MemberValue>) getOldValue()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiAnnotationElementValue  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getName()
	---! REMOVED METHOD: PUBLIC(-) void setName(japicmp.util.Optional<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) void setName(java.util.Optional<java.lang.String>)
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiAttribute  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	GENERIC TEMPLATES: === T:java.lang.Object
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiAttribute(japicmp.model.JApiChangeStatus, japicmp.util.Optional<T>, japicmp.util.Optional<T>)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiAttribute(japicmp.model.JApiChangeStatus, java.util.Optional<T>, java.util.Optional<T>)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<T><T> (<-japicmp.util.Optional<T><T>) getNewAttribute()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<T><T> (<-japicmp.util.Optional<T><T>) getOldAttribute()
***! MODIFIED CLASS: PUBLIC ABSTRACT japicmp.model.JApiBehavior  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	===! UNCHANGED INTERFACE: japicmp.model.JApiHasLineNumber
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiBehavior(japicmp.model.JApiClass, java.lang.String, japicmp.util.Optional<? extends javassist.CtBehavior>, japicmp.util.Optional<? extends javassist.CtBehavior>, japicmp.model.JApiChangeStatus, japicmp.cmp.JarArchiveComparator)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiBehavior(japicmp.model.JApiClass, java.lang.String, java.util.Optional<? extends javassist.CtBehavior>, java.util.Optional<? extends javassist.CtBehavior>, japicmp.model.JApiChangeStatus, japicmp.cmp.JarArchiveComparator)
	---! REMOVED METHOD: PROTECTED(-) void enhanceGenericTypeToParameters(japicmp.model.JApiClass, japicmp.util.Optional<? extends javassist.CtBehavior>, japicmp.util.Optional<? extends javassist.CtBehavior>)
	+++  NEW METHOD: PROTECTED(+) void enhanceGenericTypeToParameters(japicmp.model.JApiClass, java.util.Optional<? extends javassist.CtBehavior>, java.util.Optional<? extends javassist.CtBehavior>)
	---! REMOVED METHOD: PROTECTED(-) japicmp.model.JApiAttribute<japicmp.model.SyntheticAttribute> extractSyntheticAttribute(japicmp.util.Optional<? extends javassist.CtBehavior>, japicmp.util.Optional<? extends javassist.CtBehavior>)
	+++  NEW METHOD: PROTECTED(+) japicmp.model.JApiAttribute<japicmp.model.SyntheticAttribute> extractSyntheticAttribute(java.util.Optional<? extends javassist.CtBehavior>, java.util.Optional<? extends javassist.CtBehavior>)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.Integer><java.lang.Integer> (<-japicmp.util.Optional<java.lang.Integer><java.lang.Integer>) geNewLineNumber()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.Integer><java.lang.Integer> (<-japicmp.util.Optional<java.lang.Integer><java.lang.Integer>) getOldLineNumber()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiClass  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiClass(japicmp.cmp.JarArchiveComparator, java.lang.String, japicmp.util.Optional<javassist.CtClass>, japicmp.util.Optional<javassist.CtClass>, japicmp.model.JApiChangeStatus, japicmp.model.JApiClassType)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiClass(japicmp.cmp.JarArchiveComparator, java.lang.String, java.util.Optional<javassist.CtClass>, java.util.Optional<javassist.CtClass>, japicmp.model.JApiChangeStatus, japicmp.model.JApiClassType)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.CtClass><javassist.CtClass> (<-japicmp.util.Optional<javassist.CtClass><javassist.CtClass>) getNewClass()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.CtClass><javassist.CtClass> (<-japicmp.util.Optional<javassist.CtClass><javassist.CtClass>) getOldClass()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiClassType  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiClassType(japicmp.util.Optional<japicmp.model.JApiClassType$ClassType>, japicmp.util.Optional<japicmp.model.JApiClassType$ClassType>, japicmp.model.JApiChangeStatus)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiClassType(java.util.Optional<japicmp.model.JApiClassType$ClassType>, java.util.Optional<japicmp.model.JApiClassType$ClassType>, japicmp.model.JApiChangeStatus)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<japicmp.model.JApiClassType$ClassType><japicmp.model.JApiClassType$ClassType> (<-japicmp.util.Optional<japicmp.model.JApiClassType$ClassType><japicmp.model.JApiClassType$ClassType>) getNewTypeOptional()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<japicmp.model.JApiClassType$ClassType><japicmp.model.JApiClassType$ClassType> (<-japicmp.util.Optional<japicmp.model.JApiClassType$ClassType><japicmp.model.JApiClassType$ClassType>) getOldTypeOptional()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiConstructor  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	===! UNCHANGED INTERFACE: japicmp.model.JApiHasLineNumber
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiConstructor(japicmp.model.JApiClass, java.lang.String, japicmp.model.JApiChangeStatus, japicmp.util.Optional<javassist.CtConstructor>, japicmp.util.Optional<javassist.CtConstructor>, japicmp.cmp.JarArchiveComparator)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiConstructor(japicmp.model.JApiClass, java.lang.String, japicmp.model.JApiChangeStatus, java.util.Optional<javassist.CtConstructor>, java.util.Optional<javassist.CtConstructor>, japicmp.cmp.JarArchiveComparator)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.CtConstructor><javassist.CtConstructor> (<-japicmp.util.Optional<javassist.CtConstructor><javassist.CtConstructor>) getNewConstructor()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.CtConstructor><javassist.CtConstructor> (<-japicmp.util.Optional<javassist.CtConstructor><javassist.CtConstructor>) getOldConstructor()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiException  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiException(japicmp.cmp.JarArchiveComparator, java.lang.String, japicmp.util.Optional<javassist.CtClass>, japicmp.model.JApiChangeStatus)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiException(japicmp.cmp.JarArchiveComparator, java.lang.String, java.util.Optional<javassist.CtClass>, japicmp.model.JApiChangeStatus)
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiField  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiField(japicmp.model.JApiClass, japicmp.model.JApiChangeStatus, japicmp.util.Optional<javassist.CtField>, japicmp.util.Optional<javassist.CtField>, japicmp.cmp.JarArchiveComparatorOptions)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiField(japicmp.model.JApiClass, japicmp.model.JApiChangeStatus, java.util.Optional<javassist.CtField>, java.util.Optional<javassist.CtField>, japicmp.cmp.JarArchiveComparatorOptions)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.CtField><javassist.CtField> (<-japicmp.util.Optional<javassist.CtField><javassist.CtField>) getNewFieldOptional()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.CtField><javassist.CtField> (<-japicmp.util.Optional<javassist.CtField><javassist.CtField>) getOldFieldOptional()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiGenericTemplate  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiGenericTemplate(japicmp.model.JApiChangeStatus, java.lang.String, japicmp.util.Optional<java.lang.String>, japicmp.util.Optional<java.lang.String>)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiGenericTemplate(japicmp.model.JApiChangeStatus, java.lang.String, java.util.Optional<java.lang.String>, java.util.Optional<java.lang.String>)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getNewTypeOptional()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getOldTypeOptional()
***! MODIFIED INTERFACE: PUBLIC ABSTRACT japicmp.model.JApiHasLineNumber  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED METHOD: PUBLIC ABSTRACT java.util.Optional<java.lang.Integer><java.lang.Integer> (<-japicmp.util.Optional<java.lang.Integer><java.lang.Integer>) geNewLineNumber()
	***! MODIFIED METHOD: PUBLIC ABSTRACT java.util.Optional<java.lang.Integer><java.lang.Integer> (<-japicmp.util.Optional<java.lang.Integer><java.lang.Integer>) getOldLineNumber()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiImplementedInterface  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED METHOD: PUBLIC java.util.Optional<japicmp.model.JApiClass><japicmp.model.JApiClass> (<-japicmp.util.Optional<japicmp.model.JApiClass><japicmp.model.JApiClass>) getCorrespondingJApiClass()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiMethod  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	===! UNCHANGED INTERFACE: japicmp.model.JApiHasLineNumber
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiMethod(japicmp.model.JApiClass, java.lang.String, japicmp.model.JApiChangeStatus, japicmp.util.Optional<javassist.CtMethod>, japicmp.util.Optional<javassist.CtMethod>, japicmp.cmp.JarArchiveComparator)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiMethod(japicmp.model.JApiClass, java.lang.String, japicmp.model.JApiChangeStatus, java.util.Optional<javassist.CtMethod>, java.util.Optional<javassist.CtMethod>, japicmp.cmp.JarArchiveComparator)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.CtMethod><javassist.CtMethod> (<-japicmp.util.Optional<javassist.CtMethod><javassist.CtMethod>) getNewMethod()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.CtMethod><javassist.CtMethod> (<-japicmp.util.Optional<javassist.CtMethod><javassist.CtMethod>) getOldMethod()
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) java.lang.String toString(japicmp.util.Optional<javassist.CtMethod>)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.String toString(java.util.Optional<javassist.CtMethod>)
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiModifier  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	GENERIC TEMPLATES: === T:java.lang.Object
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiModifier(japicmp.util.Optional<T>, japicmp.util.Optional<T>, japicmp.model.JApiChangeStatus)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiModifier(java.util.Optional<T>, java.util.Optional<T>, japicmp.model.JApiChangeStatus)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<T><T> (<-japicmp.util.Optional<T><T>) getNewModifier()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<T><T> (<-japicmp.util.Optional<T><T>) getOldModifier()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiParameter  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiParameter(java.lang.String, japicmp.util.Optional<java.lang.String>)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiParameter(java.lang.String, java.util.Optional<java.lang.String>)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getTemplateNameOptional()
	---! REMOVED METHOD: PUBLIC(-) void setTemplateName(japicmp.util.Optional<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) void setTemplateName(java.util.Optional<java.lang.String>)
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiReturnType  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiReturnType(japicmp.model.JApiChangeStatus, japicmp.util.Optional<java.lang.String>, japicmp.util.Optional<java.lang.String>)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiReturnType(japicmp.model.JApiChangeStatus, java.util.Optional<java.lang.String>, java.util.Optional<java.lang.String>)
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiSerialVersionUid  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiSerialVersionUid(boolean, boolean, japicmp.util.Optional<java.lang.Long>, japicmp.util.Optional<java.lang.Long>, japicmp.util.Optional<java.lang.Long>, japicmp.util.Optional<java.lang.Long>)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiSerialVersionUid(boolean, boolean, java.util.Optional<java.lang.Long>, java.util.Optional<java.lang.Long>, java.util.Optional<java.lang.Long>, java.util.Optional<java.lang.Long>)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.Long><java.lang.Long> (<-japicmp.util.Optional<java.lang.Long><java.lang.Long>) getSerialVersionUidDefaultNew()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.Long><java.lang.Long> (<-japicmp.util.Optional<java.lang.Long><java.lang.Long>) getSerialVersionUidDefaultOld()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.Long><java.lang.Long> (<-japicmp.util.Optional<java.lang.Long><java.lang.Long>) getSerialVersionUidInClassNew()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.Long><java.lang.Long> (<-japicmp.util.Optional<java.lang.Long><java.lang.Long>) getSerialVersionUidInClassOld()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiSuperclass  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiSuperclass(japicmp.model.JApiClass, japicmp.util.Optional<javassist.CtClass>, japicmp.util.Optional<javassist.CtClass>, japicmp.model.JApiChangeStatus, japicmp.cmp.JarArchiveComparator)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiSuperclass(japicmp.model.JApiClass, java.util.Optional<javassist.CtClass>, java.util.Optional<javassist.CtClass>, japicmp.model.JApiChangeStatus, japicmp.cmp.JarArchiveComparator)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<japicmp.model.JApiClass><japicmp.model.JApiClass> (<-japicmp.util.Optional<japicmp.model.JApiClass><japicmp.model.JApiClass>) getCorrespondingJApiClass()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<japicmp.model.JApiClass><japicmp.model.JApiClass> (<-japicmp.util.Optional<japicmp.model.JApiClass><japicmp.model.JApiClass>) getJApiClass()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.CtClass><javassist.CtClass> (<-japicmp.util.Optional<javassist.CtClass><javassist.CtClass>) getNewSuperclass()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getNewSuperclassName()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<javassist.CtClass><javassist.CtClass> (<-japicmp.util.Optional<javassist.CtClass><javassist.CtClass>) getOldSuperclass()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getOldSuperclassName()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiType  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiType(japicmp.util.Optional<java.lang.String>, japicmp.util.Optional<java.lang.String>, japicmp.model.JApiChangeStatus)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiType(java.util.Optional<java.lang.String>, java.util.Optional<java.lang.String>, japicmp.model.JApiChangeStatus)
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getNewTypeOptional()
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getOldTypeOptional()
***! MODIFIED CLASS: PUBLIC japicmp.model.JavaObjectSerializationCompatibility  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) japicmp.model.JApiSerialVersionUid extractSerialVersionUid(japicmp.cmp.JarArchiveComparatorOptions, japicmp.cmp.JarArchiveComparator, japicmp.util.Optional<javassist.CtClass>, japicmp.util.Optional<javassist.CtClass>)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) japicmp.model.JApiSerialVersionUid extractSerialVersionUid(japicmp.cmp.JarArchiveComparatorOptions, japicmp.cmp.JarArchiveComparator, java.util.Optional<javassist.CtClass>, java.util.Optional<javassist.CtClass>)
***! MODIFIED CLASS: PUBLIC japicmp.output.html.HtmlOutputGeneratorOptions  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getTitle()
***! MODIFIED CLASS: PUBLIC japicmp.output.markdown.config.MarkdownMessageOptions  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED METHOD: PUBLIC(-) java.lang.String getClassType(japicmp.util.Optional<japicmp.model.JApiClassType$ClassType>)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getClassType(java.util.Optional<japicmp.model.JApiClassType$ClassType>)
***! MODIFIED CLASS: PUBLIC japicmp.output.markdown.config.MarkdownOptions  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED FIELD: PUBLIC java.util.Optional (<- japicmp.util.Optional)<java.lang.String><java.lang.String> targetNewVersion
	***! MODIFIED FIELD: PUBLIC java.util.Optional (<- japicmp.util.Optional)<java.lang.String><java.lang.String> targetOldVersion
***! MODIFIED CLASS: PUBLIC japicmp.output.xml.model.JApiCmpXmlRoot  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getTitleOptional()
	---! REMOVED METHOD: PUBLIC(-) void setTitleOptional(japicmp.util.Optional<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) void setTitleOptional(java.util.Optional<java.lang.String>)
***! MODIFIED CLASS: PUBLIC japicmp.output.xml.XmlOutput  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.io.ByteArrayOutputStream><java.io.ByteArrayOutputStream> (<-japicmp.util.Optional<java.io.ByteArrayOutputStream><java.io.ByteArrayOutputStream>) getXmlOutputStream()
	---! REMOVED METHOD: PUBLIC(-) void setXmlOutputStream(japicmp.util.Optional<java.io.ByteArrayOutputStream>)
	+++  NEW METHOD: PUBLIC(+) void setXmlOutputStream(java.util.Optional<java.io.ByteArrayOutputStream>)
***! MODIFIED CLASS: PUBLIC japicmp.output.xml.XmlOutputGeneratorOptions  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED METHOD: PUBLIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getTitle()
***! MODIFIED CLASS: PUBLIC japicmp.util.AnnotationHelper  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) void computeAnnotationChanges(java.util.List<japicmp.model.JApiAnnotation>, japicmp.util.Optional<T>, japicmp.util.Optional<T>, japicmp.cmp.JarArchiveComparatorOptions, japicmp.util.AnnotationHelper$AnnotationsAttributeCallback<T>)
		GENERIC TEMPLATES: --- T:java.lang.Object
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void computeAnnotationChanges(java.util.List<japicmp.model.JApiAnnotation>, java.util.Optional<T>, java.util.Optional<T>, japicmp.cmp.JarArchiveComparatorOptions, japicmp.util.AnnotationHelper$AnnotationsAttributeCallback<T>)
		GENERIC TEMPLATES: +++ T:java.lang.Object
***! MODIFIED CLASS: PUBLIC japicmp.util.ModifierHelper  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) japicmp.model.JApiModifier<T> extractModifierFromBehavior(japicmp.util.Optional<? extends javassist.CtBehavior>, japicmp.util.Optional<? extends javassist.CtBehavior>, japicmp.util.ModifierHelper$ExtractModifierFromBehaviorCallback<T>)
		GENERIC TEMPLATES: --- T:japicmp.model.JApiModifierBase
	+++  NEW METHOD: PUBLIC(+) STATIC(+) japicmp.model.JApiModifier<T> extractModifierFromBehavior(java.util.Optional<? extends javassist.CtBehavior>, java.util.Optional<? extends javassist.CtBehavior>, japicmp.util.ModifierHelper$ExtractModifierFromBehaviorCallback<T>)
		GENERIC TEMPLATES: +++ T:japicmp.model.JApiModifierBase
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) japicmp.model.JApiModifier<T> extractModifierFromClass(japicmp.util.Optional<javassist.CtClass>, japicmp.util.Optional<javassist.CtClass>, japicmp.util.ModifierHelper$ExtractModifierFromClassCallback<T>)
		GENERIC TEMPLATES: --- T:japicmp.model.JApiModifierBase
	+++  NEW METHOD: PUBLIC(+) STATIC(+) japicmp.model.JApiModifier<T> extractModifierFromClass(java.util.Optional<javassist.CtClass>, java.util.Optional<javassist.CtClass>, japicmp.util.ModifierHelper$ExtractModifierFromClassCallback<T>)
		GENERIC TEMPLATES: +++ T:japicmp.model.JApiModifierBase
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) japicmp.model.JApiModifier<T> extractModifierFromField(japicmp.util.Optional<javassist.CtField>, japicmp.util.Optional<javassist.CtField>, japicmp.util.ModifierHelper$ExtractModifierFromFieldCallback<T>)
		GENERIC TEMPLATES: --- T:japicmp.model.JApiModifierBase
	+++  NEW METHOD: PUBLIC(+) STATIC(+) japicmp.model.JApiModifier<T> extractModifierFromField(java.util.Optional<javassist.CtField>, java.util.Optional<javassist.CtField>, japicmp.util.ModifierHelper$ExtractModifierFromFieldCallback<T>)
		GENERIC TEMPLATES: +++ T:japicmp.model.JApiModifierBase
	***! MODIFIED METHOD: PUBLIC STATIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getNewModifierName(japicmp.model.JApiModifier<? extends java.lang.Enum<? extends java.lang.Enum<? extends ?>>><? extends java.lang.Enum<? extends java.lang.Enum<? extends ?>>>)
	***! MODIFIED METHOD: PUBLIC STATIC java.util.Optional<java.lang.String><java.lang.String> (<-japicmp.util.Optional<java.lang.String><java.lang.String>) getOldModifierName(japicmp.model.JApiModifier<? extends java.lang.Enum<? extends java.lang.Enum<? extends ?>>><? extends java.lang.Enum<? extends java.lang.Enum<? extends ?>>>)
---! REMOVED CLASS: PUBLIC(-) ABSTRACT(-) japicmp.util.Optional  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 52.0
	GENERIC TEMPLATES: --- T:java.lang.Object
	---! REMOVED SUPERCLASS: java.lang.Object
	---! REMOVED CONSTRUCTOR: PUBLIC(-) Optional()
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) japicmp.util.Optional<T> absent()
		GENERIC TEMPLATES: --- T:java.lang.Object
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) boolean equals(java.lang.Object)
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) japicmp.util.Optional<T> fromNullable(java.lang.Object)
		GENERIC TEMPLATES: --- T:java.lang.Object
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) java.lang.Object get()
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) int hashCode()
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) boolean isPresent()
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) japicmp.util.Optional<T> of(java.lang.Object)
		GENERIC TEMPLATES: --- T:java.lang.Object
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) japicmp.util.Optional<T> or(japicmp.util.Optional<? extends T>)
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) java.lang.Object or(java.lang.Object)
***! MODIFIED CLASS: PUBLIC japicmp.util.OptionalHelper  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) java.lang.String optionalToString(japicmp.util.Optional<T>)
		GENERIC TEMPLATES: --- T:java.lang.Object
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.String optionalToString(java.util.Optional<T>)
		GENERIC TEMPLATES: +++ T:java.lang.Object
***! MODIFIED CLASS: PUBLIC japicmp.util.TypeNameHelper  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) java.lang.String formatParameterTypeName(japicmp.model.JApiBehavior, japicmp.model.JApiParameter, japicmp.util.Optional<japicmp.model.VarargsModifier>, java.util.List<japicmp.model.JApiGenericType>, boolean)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.String formatParameterTypeName(japicmp.model.JApiBehavior, japicmp.model.JApiParameter, java.util.Optional<japicmp.model.VarargsModifier>, java.util.List<japicmp.model.JApiGenericType>, boolean)
***! MODIFIED CLASS: PUBLIC japicmp.versioning.SemanticVersion  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED METHOD: PUBLIC java.util.Optional<japicmp.versioning.SemanticVersion$ChangeType><japicmp.versioning.SemanticVersion$ChangeType> (<-japicmp.util.Optional<japicmp.versioning.SemanticVersion$ChangeType><japicmp.versioning.SemanticVersion$ChangeType>) computeChangeType(japicmp.versioning.SemanticVersion)
***! MODIFIED CLASS: PUBLIC japicmp.versioning.Version  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED METHOD: PUBLIC java.util.Optional<japicmp.versioning.SemanticVersion><japicmp.versioning.SemanticVersion> (<-japicmp.util.Optional<japicmp.versioning.SemanticVersion><japicmp.versioning.SemanticVersion>) getSemanticVersion()
	***! MODIFIED METHOD: PUBLIC STATIC java.util.Optional<japicmp.versioning.SemanticVersion><japicmp.versioning.SemanticVersion> (<-japicmp.util.Optional<japicmp.versioning.SemanticVersion><japicmp.versioning.SemanticVersion>) getSemanticVersion(java.lang.String)
***! MODIFIED CLASS: PUBLIC japicmp.versioning.VersionChange  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	***! MODIFIED METHOD: PUBLIC java.util.Optional<japicmp.versioning.SemanticVersion$ChangeType><japicmp.versioning.SemanticVersion$ChangeType> (<-japicmp.util.Optional<japicmp.versioning.SemanticVersion$ChangeType><japicmp.versioning.SemanticVersion$ChangeType>) computeChangeType()
		===  UNCHANGED EXCEPTION: japicmp.exception.JApiCmpException

Semantic versioning suggestion: 1.0.0